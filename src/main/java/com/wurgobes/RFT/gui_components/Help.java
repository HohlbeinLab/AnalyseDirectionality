package com.wurgobes.RFT.gui_components;


import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import java.awt.*;

/**
 * This class and all other classes in this folder were adapted from (<a href="https://github.com/Biomedical-Imaging-Group/OrientationJ">OrientationJ</a>)
 * Please refer to their GitHub page for further documentation.
 * <p>
 * This class extends the Java JEditorPane to make a easy to use panel to
 * display HTML information.
 *
 * @author Daniel Sage, Biomedical Imaging Group, EPFL, Lausanne, Switzerland.
 *
 */
public class Help extends JEditorPane {

    private String		html		= "";
    private String		header		= "";
    private String		footer		= "";
    private String		font		= "verdana";
    private String		color		= "#222222";
    private String		background	= "#f8f8f8";

    public Help() {
        header += "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n";
        header += "<html><head>\n";
        header += "<style>body {background-color:" + background + "; color:" + color + "; font-family: " + font + ";margin:4px}</style>\n";
        header += "<style>h1 {color:#555555; font-size:1.0em; font-weight:bold; padding:1px; margin:1px; padding-top:5px}</style>\n";
        header += "<style>h2 {color:#333333; font-size:0.9em; font-weight:bold; padding:1px; margin:1px;}</style>\n";
        header += "<style>h3 {color:#000000; font-size:0.9em; font-weight:italic; padding:1px; margin:1px;}</style>\n";
        header += "<style>p, li  {color:" + color + "; font-size:0.9em; padding:1px; margin:0px;}</style>\n";
        header += "</head>\n";
        header += "<body>\n";
        footer += "</body></html>\n";
        setEditable(false);
        setContentType("text/html; charset=ISO-8859-1");

        append("<div style=\"text-align:center\">");
        append("h1", Constants.softname + " " + Constants.version);
        append("p", Constants.date);
        append("<p><u>" + Constants.link + "</u></p>");
        append("<p><i>" + Constants.author + "</i></p>");
        append("</div>");

        append("h1", "Processing");
        append("h2", "Processing Window");
        append("p", "The size of the windows in which to calculate the angles");

        append("h2", "Overlap");
        append("p", "How much does the next window overlap the previous");

        append("h2", "Buffer");
        append("p", "How many pixels should be skipped before processing starts");

        append("h2", "Run Python");
        append("p", "Check this to automatically save the data and run the python script. See Settings tab for the path and python command");

        append("h1", "Vector Field");
        append("h2", "Vector Length");
        append("p", "The Length of the Vectors in %");

        append("h2", "Vector Width");
        append("p", "The Width of the vectors in pixels");

        append("h2", "Overlay");
        append("p", "To display the vectors or not");

        append("h1", "Cutoffs");
        append("h2", "std Cutoff");
        append("p", "How many standard deviations the signal must be over the mean");

        append("h2", "Intensity Cutoff");
        append("p", "How high must the mean intensity be per window");

        append("h1", "Scan");
        append("h2", "Window Start/Step/End");
        append("p", "What size to start/end the scan at and what step size to take.");

        append("h2", "Save Scans");
        append("p", "Save each individual Scan");

        append("h1", "Settings");
        append("h2", "Save Path");
        append("p", "The path where to save the files. The final folder must be named input, or an input folder will be created.");

        append("h2", "Python Path");
        append("p", "The command/path for python. Usually 'py' or 'python'. Ensure the correct packages are installed here.");

        append("h2", "Script Path");
        append("p", "The folder which contains the script 'gaussian_order.py'");

        append("h2", "Show Graph");
        append("p", "Show the graphs generated by the python script");


    }

    @Override
    public String getText() {
        Document doc = this.getDocument();
        try {
            return doc.getText(0, doc.getLength());
        }
        catch (BadLocationException e) {
            e.printStackTrace();
            return getText();
        }
    }

    public void append(String content) {
        html += content;
        setText(header + html + footer);
        setCaretPosition(0);
    }

    public void append(String tag, String content) {
        html += "<" + tag + ">" + content + "</" + tag + ">";
        setText(header + html + footer);
        setCaretPosition(0);
    }

    public JScrollPane getPane() {
        JScrollPane scroll = new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        return scroll;
    }

    public void show(int w, int h) {
        JScrollPane scroll = new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scroll.setPreferredSize(new Dimension(w, h));
        JFrame frame = new JFrame();
        frame.getContentPane().add(scroll);
        frame.pack();
        frame.setVisible(true);
    }
}
